version: 2.1
orbs:
  gcp-gcr: circleci/gcp-gcr@0.6.1
jobs:

  lint:
    docker:
    - image: circleci/python:3.7
    steps:
      - checkout
      - run: sudo pip3 install black==19.10b0 flake8==3.7.8
      - run: make lint

  test_python:
    docker:
      - image: circleci/python:3.7
    working_directory: ~/repo

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "external/fv3util/requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run:
          name: install dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            pip3 install -r external/fv3util/requirements.txt
      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "external/fv3util/requirements.txt" }}

      - run:
          name: run tests
          command: |
            . venv/bin/activate
            pip3 install -e external/fv3util
            pytest external/fv3util/tests

  build_default:
    machine:
      docker_layer_caching: true
      image: ubuntu-1604:201903-01
    environment:
      GCR_IMAGE: us.gcr.io/vcm-ml/fv3gfs-python
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/key.json
    steps:
      - checkout
      - run:
          name: "save gcloud key for gcsfs"
          command: |
            echo $ENCODED_GCR_KEY | base64 -d > $GOOGLE_APPLICATION_CREDENTIALS
      - add_ssh_keys:
          fingerprints:
            - "b6:e7:38:b9:a6:61:ec:f2:27:81:0c:8e:b9:79:41:ca"
      - run:
          name: "Pull submodules"
          command: |
            git submodule update --init --recursive
      - restore_cache:
          keys:
            - v1-build-dependencies-{{ checksum "requirements.txt" }}
            # fallback to using the latest cache if no exact match is found
            - v1-build-dependencies-
      - run: 
          name: "Install Python test dependencies"
          command: |
            pyenv versions
            [ -d /opt/circleci/.pyenv/versions/3.6.2 ] || pyenv install 3.6.2
            pyenv global 3.6.2
            pip install --upgrade pip setuptools
            pip install -r requirements.txt
            pip install -e external/fv3config
            pip install -e external/fv3util
      - save_cache:
          paths:
            - /opt/circleci/.pyenv/versions/3.6.2
          key: v1-build-dependencies-{{ checksum "requirements.txt" }}
      - run: 
          name: "Compile model and perform model tests"
          command: |
            echo "$ENCODED_GCR_KEY" | base64 --decode | docker login --username _json_key --password-stdin https://us.gcr.io
            DOCKER_BUILDKIT=1 BUILD_FROM_INTERMEDIATE=y bash test_docker.sh
      - run:
          name: "Run example runfiles"
          command: |
            make public_examples
      - run:
          name: "Build documentation"
          command: |
            make docs-docker
      - run:
          name: "Enable Python 2 for google cloud tools"
          command: |
            pyenv global 2.7.12
      - gcp-gcr/gcr-auth
      - run: |
          echo "$ENCODED_GCR_KEY" | base64 --decode | docker login --username _json_key --password-stdin https://gcr.io
          if [[ "$CIRCLE_BRANCH" == "master" ]]
          then
              echo "pushing untagged image $GCR_IMAGE"
              docker push $GCR_IMAGE
          fi
          if [[ ! -z "$CIRCLE_TAG" ]]
          then
              echo "pushing tagged image $GCR_IMAGE:$CIRCLE_TAG"
              docker tag $GCR_IMAGE $GCR_IMAGE:$CIRCLE_TAG
              docker push $GCR_IMAGE:$CIRCLE_TAG
          fi
      - run:
          name: "Delete data files"
          command: |
            rm ./tests/image_tests/output/*/INPUT/*.nc
            rm ./tests/image_tests/output/*/grb/*.grb
          when: on_fail
      - store_artifacts:
          path: ./tests/image_tests/output
      - persist_to_workspace:
          root: docs/_build
          paths: html

  docs_deploy:
    docker:
      - image: node:8.10.0
    steps:
      - checkout
      - attach_workspace:
          at: docs/_build
      - add_ssh_keys:
          fingerprints:
            - "92:ab:f0:a2:9e:78:fa:5d:dc:c9:b2:38:9a:46:b1:ab"  # push fv3gfs-python
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build@vulcan.com"
            git config user.name "ci-build"
      - run:
          name: Deploy docs to gh-pages branch
          command: |
            mkdir upload
            touch upload/.nojekyll
            mv docs/_build/html upload/f12n7eq5xkoibbqp
            gh-pages --dotfiles --dist upload

workflows:
  version: 2
  tagged-build:
    jobs:
      - lint:
          filters:
            tags:
              only: /^v.*/
      - test_python:
          filters:
            tags:
              only: /^v.*/
      - build_default:
          requires:
            - lint
            - test_python
          filters:
            tags:
              only: /^v.*/
      - docs_deploy:
          requires:
            - build_default
          filters:
            branches:
              only: master
